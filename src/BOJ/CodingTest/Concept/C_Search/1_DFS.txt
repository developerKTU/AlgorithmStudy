

※ DFS (깊이우선탐색)
    1) 개요
        - 그래프 완전탐색 기법 중 하나
        - 루트 노드에서 출발 -> 탐색할 한 쪽 분기를 정하여 가장 깊은 노드까지탐색을 마친 후
          다른 쪽 분기로 이동 다시 탐색

    2) 특징
        - 재귀함수로 구현 가능 ★
        - 스택으로 구현 가능

    3) 시간복잡도
        - O(V + E)
            -> V는 정점 (노드), E는 간선 (연결선)

    4) 핵심이론
        - 한 번 방문한 노드는 다시 방문하지 않음
            -> 노드 방문여부를 체크할 배열이 필요함.
        - 그래프는 인접 리스트로 표현
            ※ 인접리스트 : ArrayList로 그래프를 표현한 것.
                         (노드 갯수만큼 ArrayList 사이즈 선언 후 N번 노드와 연결된 노드들을 담고 있는 배열과 연결)
        - DFS는 후입선출 성격을 가지므로 스택으로 구현가능함 (하지만 주로 재귀함수를 채택함)

    5) 로직
        <1> DFS를 시작할 노드를 정한 후 자료구조 초기화
            - 인접리스트로 그래프 표현
            - 방문배열 초기화 -> 시작노드 위치의 배열값을 T로 초기화 (시작노드가 1이면 배열의 첫번째 값을 T로 초기화)
            - 스택에 시작노드 번호 push
        <2> 스택에서 노드를 꺼내면서 탐색순서에 꺼낸 노드를 결과 배열등에 기록
        <3> 대상노드의 인접노드를 스택에 삽입
        <4> 스택에 삽입하면서 방문배열에 해당 노드들의 위치 배열값을 T로 초기화
            - 예를들어 1의 인접노드는 2, 3 이므로 2, 3을 스택에 넣고 방문배열의 2번째, 3번째 값을 T로 초기화
        <5> 스택 자료구조에 값이 없을때 까지 반복
            ※ 이미 방문한 노드는 방문배열을 바탕으로 '재삽입하지 않는 것'이 포인트!


    5) 응용문제
        - 단절점 찾기, 단절선 찾기, 사이클 찾기, 위상정렬 등

    6) 주의점
        - DFS는 주로 재귀함수를 이용하므로, 스택 오버플로에 유의해야함.